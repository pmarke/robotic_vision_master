#!/usr/bin/env python
PACKAGE="rvm"

import cv2

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

manager = gen.add_group("Filter Manager")

canny = gen.add_group("Canny Filter")

linear = gen.add_group("Lienar Filters")


# sobel aperture size
ksize_enum = gen.enum([gen.const("3",int_t,3,""),
					   gen.const("5",int_t,5,""),
					   gen.const("7",int_t,7,""),
					   gen.const("9",int_t,9,""),
					   gen.const("11",int_t,11,""),
					   gen.const("13",int_t,13,""),
					   gen.const("15",int_t,15,""),
					   gen.const("17",int_t,17,""),
					   gen.const("19",int_t,19,""),
					   gen.const("21",int_t,21,"")],"ksize")

border_type_enum = gen.enum([gen.const("BORDER_CONSTANT",int_t,cv2.BORDER_CONSTANT,"iiiiii|abcdefgh|iiiiiii"),
							 gen.const("BORDER_REPLICATE",int_t,cv2.BORDER_REPLICATE,"aaaaaa|abcdefgh|hhhhhhh"),
							 gen.const("BORDER_REFLECT",int_t,cv2.BORDER_REFLECT,"fedcba|abcdefgh|hgfedcb"),
							 gen.const("BORDER_WRAP",int_t,cv2.BORDER_WRAP,"cdefgh|abcdefgh|abcdefg"),
							 gen.const("BORDER_REFLECT_101",int_t,cv2.BORDER_REFLECT_101,"gfedcb|abcdefgh|gfedcba"),
							 gen.const("BORDER_DEFAULT",int_t,cv2.BORDER_DEFAULT,"")],"borderType")

filter_type_enum = gen.enum([gen.const("FILTER_CANNY", int_t,0,"Implement the Canny Filter"),
							 gen.const("FILTER_LINEAR",int_t,1,"Implement one of the linear filters.")], "Filter Type")

linear_filter_type_enum = gen.enum([gen.const("BILATERAL", int_t, 0,"Implement Bilateral Filter"),
									gen.const("GAUSSIAN", int_t, 1, "Implement Gaussian Filter"),
									gen.const("MEDIAN", int_t, 2, "Implement Median Filter")], "Linear Filter Type")

# Filter Manager
manager.add("filter_type", int_t, 0, "Type of Filter", 0, 0, 1,edit_method=filter_type_enum)


# Canny Filter parameters
canny.add("canny_threshold_min", int_t, 0, "min threshold value for Hysteresis Thresholding", 100,0,254)
canny.add("canny_threshold_max", int_t, 0, "max threshold value for Hysteresis Thresholding", 200, 1, 255)
canny.add("canny_apertureSize", int_t, 0, "aperture size for the Sobel() operator", 3,3,7, edit_method=ksize_enum)
canny.add("canny_L2gradient", bool_t, 0, "a flag to indicate wheter to use L2 norm or L1 to find gradient intensity", True)


# Linear Filters

linear.add("linear_filter_type", int_t, 0, "Type of Linear Filter", 0, 0, 2, edit_method=linear_filter_type_enum)

linear.add("gaussian_ksize", int_t, 0, "Gaussian kernel size", 1, 1, 51)
linear.add("gaussian_sigmaX", double_t, 0, "Gaussian kernel standard deviation in X direcion", 0,0,10)
linear.add("gaussian_sigmaY", double_t, 0, "Gaussian kernel standard deviation in Y direcion", 0,0,10)

linear.add("bilateral_d", int_t, 0, "Diameter of each pixel neighborhood that is used during filtering",9,1,30)
linear.add("bilateral_sigmaColor", double_t, 0, "Filter sigma in the color space", 75, 0, 100)
linear.add("bilateral_sigmaSpace", double_t, 0, "Filter sigma in the coordinate space", 75,0,100)

linear.add("borderType", int_t, 0, "Type of padding around image.", cv2.BORDER_DEFAULT,0,4,edit_method=border_type_enum)

linear.add("median_ksize", int_t, 0, "Median Kernel size", 3, 3, 31, edit_method = ksize_enum);


exit(gen.generate(PACKAGE, "rvm", "filterManager" ))